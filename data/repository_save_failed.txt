 @Test
    @DataSet(value = "products.yml")
    @DisabledIf
    void testSave() {
        // Create a new product and save it to the database
        Product product = new Product("Samsung A15", 5);
        product.setVersion(1);
        Product savedProduct = repository.save(product);

        // Validate the saved product
        assertEquals("Samsung A15", savedProduct.getName());
        assertEquals(5, savedProduct.getQuantity().intValue());

        // Validate that we can get it back out of the database
        Optional<Product> loadedProduct = repository.findById(savedProduct.getProductId());
        Assertions.assertTrue(loadedProduct.isPresent(), "Could not reload product from the database");
        assertEquals("Samsung A15", loadedProduct.get().getName(), "Product name does not match");
        assertEquals(5, loadedProduct.get().getQuantity().intValue(), "Product quantity does not match");
        assertEquals(1, loadedProduct.get().getVersion().intValue(), "Product version is incorrect");
    }


    https://app.pluralsight.com/course-player?clipId=0ea5ccad-c772-404a-9513-b7898d110682 course TDD

    Integration failed also

     @Test
        @DisplayName("POST /products/create - Success")
        @DataSet("products.yml")
        void testCreateProduct() throws Exception {
            // Setup product to create
            Product postProduct = new Product("Product Name", 10);

            mockMvc.perform(post("/api/products/create")
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(asJsonString(postProduct)))

                    // Validate the response code and content type
                    .andExpect(status().isCreated())
                    .andExpect(content().contentType(MediaType.APPLICATION_JSON))

                    // Validate the headers
                    .andExpect(header().string(HttpHeaders.ETAG, "\"1\""))
                    .andExpect(header().exists(HttpHeaders.LOCATION))

                    // Validate the returned fields
                    .andExpect(jsonPath("$.id", any(Integer.class)))
                    .andExpect(jsonPath("$.name", is("Product Name")))
                    .andExpect(jsonPath("$.quantity", is(10)))
                    .andExpect(jsonPath("$.version", is(1)));
        }