Create an .env file: Create a file named .env in the same directory as your Docker Compose file (usually docker-compose.yml). This file will store your sensitive environment variables.

Add environment variables to .env: In your .env file, add environment variables for your database configuration. For example:

dotenv
Copy code
DB_HOST=your-database-url
DB_PORT=3306
DB_NAME=your-database
DB_USER=your-database-username
DB_PASSWORD=your-database-password
Replace the values with your actual database configuration.

Modify your Docker Compose file: In your docker-compose.yml file, reference these environment variables for your service configurations. For example, if you have a MySQL service, you can modify it like this:

yaml
Copy code
services:
  mysql:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
Here, we use ${DB_PASSWORD}, ${DB_NAME}, ${DB_USER}, and ${DB_PASSWORD} to reference the environment variables defined in the .env file.

Use Docker Compose with the .env file: When you run Docker Compose commands, make sure to specify the .env file using the --env-file flag. For example:

shell
Copy code
docker-compose --env-file .env up -d
This ensures that your environment variables are loaded from the .env file.

Add .env to your .gitignore: To avoid accidentally committing your sensitive .env file to GitHub, add it to your .gitignore file. Create or update a .gitignore file in your project directory and add the following line:

bash
Copy code
.env
This will prevent the .env file from being included in your Git repository.