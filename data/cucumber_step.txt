
//    @Then("the response should contain the following products:")
//    public void responseShouldContainProducts(List<Product> expectedProducts) {
//        Product[] actualProducts = response.getBody();
//        assertNotNull("Response should not be null", actualProducts);
//
//        // Verify each expected product in the response.
//        for (Product expectedProduct : expectedProducts) {
//            boolean found = false;
//            for (Product actualProduct : actualProducts) {
//                if (Objects.equals(expectedProduct.getProductId(), actualProduct.getProductId()) &&
//                        expectedProduct.getName().equals(actualProduct.getName()) &&
//                        Objects.equals(expectedProduct.getQuantity(), actualProduct.getQuantity()) &&
//                        Objects.equals(expectedProduct.getVersion(), actualProduct.getVersion())) {
//                    found = true;
//                    break;
//                }
//            }
//            assertTrue("Expected product not found in the response: " + expectedProduct.toString(), found);
//        }
//    }


//    @Then("the response should contain the following products:")
//    public void responseShouldContainProducts(List<Product> expectedProducts) {
//        Product[] actualProducts = response.getBody();
//        assertNotNull("Response should not be null", actualProducts);
//
//        // Convert the actualProducts array to a List for easier manipulation
//        List<Product> actualProductList = Arrays.asList(actualProducts);
//
//        // Check if each expected product is present in the actual products list
//        boolean allExpectedProductsFound = expectedProducts.stream()
//                .allMatch(expectedProduct -> actualProductList.stream()
//                        .anyMatch(expectedProduct::equals));
//
//        assertTrue("Not all expected products found in the response", allExpectedProductsFound);
//    }